var documenterSearchIndex = {"docs":
[{"location":"#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Here is the API for YourPackageName:","category":"page"},{"location":"#Filters.NoResampling","page":"API Documentation","title":"Filters.NoResampling","text":"NoResampling\n\nType representing a particle filter resampling strategy that performs no resampling.\n\nThis is useful in cases where resampling is disabled or deferred, such as for debugging, evaluating filter performance without resampling noise, or implementing custom resampling criteria.\n\nIn this case, no change is made to the particle set or the weights. \n\n\n\n\n\n","category":"type"},{"location":"#Filters.SystematicResampling","page":"API Documentation","title":"Filters.SystematicResampling","text":"SystematicResampling\n\nType representing systematic resampling, a low-variance resampling method commonly used in particle filters.\n\nSystematic resampling uses a single random offset and evenly spaced intervals to select particles proportionally to their weights. It is more deterministic than multinomial resampling and typically exhibits lower variance.\n\nMath\n\nLet the normalized weight of a particle i be w_i. The resampling process is done as follows:\n\nGenerate a random offset xi sim mathcalU(0 1N).\nCompute the positions: \n\np_j = xi + fracj-1N quad j = 1 2 dots N\n\nFor each position p_j, find the particle index i such that:\n\np_j in c_i-1 c_i)\n\nwhere c_i is the cumulative sum of the weights:\n\nc_i = sum_k=1^i w_k\n\nAssign the particles accordingly, then reset the weights to uniform (1N).\n\n\n\n\n\n","category":"type"},{"location":"#Filters.MultinomialResampling","page":"API Documentation","title":"Filters.MultinomialResampling","text":"MultinomialResampling{T}\n\nType representing multinomial resampling with a preallocated buffer.\n\nThis resampling strategy samples particles independently according to their normalized weights using inverse transform sampling. It uses a buffer matrix to avoid in-place overwrites and minimize allocations.\n\nMath\n\nLet the normalized weight of a particle i be w_i. For each particle j, sample u_j in mathcalU(0 1), then find the index i such that:\n\nc_i-1 = sum_k=1^i-1 w_k  u_j leq sum_k=1^i w_k = c_i\n\nThis corresponds to the resampled particle index i for the particle j.  The resampling process is done as follows:\n\nCompute the cumulative sum of normalized weights, boldsymbolc.\nFor each particle, draw a random number u_j in mathcalU(0 1).\nFind the corresponding index i using the inverse CDF:\n\ni = textsearchsortedfirst(boldsymbolc u_j)\n\nAssign the particle j to particle i.  When the particles resampling is finished, reset the weights to uniform (1N).\n\n\n\n\n\n","category":"type"}]
}
